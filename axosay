#!/usr/bin/env python
from time import sleep
import random
import threading
import sys
import os
import subprocess
from blessed import Terminal
import argparse
import textwrap
term = Terminal()
# Ideas: animated typing, animated axolotl, replace string in bubble
# Todo: import axolottle images
# wrap text to ? screensize - newline mark on axolotl.txt 

# # # USER SETTINGS # # #
bubble_char = '.'
animation_folder_path = "resources/animated/axolotl/"
animation_mouth_line = 4
frame_rate = 0.17
h_padding_int = 2
v_padding_int = 1
art_max_width = 19 #edge to edge of ascii size
art_max_height = 12
text_max_height = term.height - 2
# # # END USER SETTINGS # # #


space_for_text = (term.width - art_max_width) - h_padding_int*2
space_for_art = (term.width - space_for_text) - h_padding_int*2
parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", default='', help="What do you want to say?")
args = parser.parse_args()

alphabet = " abcdefghijklmnopqrstiuvwxyz"
homedir = os.path.expanduser("~")
text_rendered = False #flag 
text_end_line = 0
text_wrapped_continued = []
single_line_end = ''
wrapper = textwrap.TextWrapper(width=space_for_text, max_lines=text_max_height-v_padding_int)

blank_text_line = ''
for space in range(0,space_for_text):
    blank_text_line = blank_text_line + ' '
blank_space = ''
for space in range(0,term.width):
    blank_space = blank_space + ' '
h_padding = ''
for space in range(0,h_padding_int):
    h_padding = h_padding + ' '
v_padding = ''
for space in range(v_padding_int):
    v_padding = v_padding + ' '

def check_term():
    if term.height < art_max_height:
        print("Term size needs to be at least " + str(art_max_height) + " by " + str(art_max_width + 5))
        exit()

def load_art(ascii_path):
    with open(ascii_path) as file:
        data = file.readlines()
    return data

def load_frames(animation_file_paths):
    animation = []
    for path in animation_file_paths:
            file = load_art(path)
            animation.append(file)
    return animation

def wrap_text(text):
    #after x lines append to second obj
    wrapped_lines = wrapper.wrap(text)
    return wrapped_lines

def pad_text(text_wrapped):
    global text_end_line
    global text_wrapped_p2
    global single_line_end
    text_wrapped_p2 = []
 #   text_wrapped.insert(0, blank_text_line)
  #  text_wrapped.append(v_padding)
    if len(text_wrapped) == 1:
        single_line_end = len(text_wrapped[0])
        return text_wrapped
    for line in range(0,len(text_wrapped)):
        text_wrapped[line] = text_wrapped[line] + ' '
        while len(text_wrapped[line]) < space_for_text:
            text_wrapped[line] = text_wrapped[line] + " "
            text_end_line = line
    while len(text_wrapped) > text_max_height:
        text_wrapped_continued += text_wrapped.pop(len(text_wrapped))
    while len(text_wrapped) < text_max_height:
        text_wrapped.append(blank_text_line)
    return text_wrapped

def get_file_paths():
    animation_file_paths = [os.path.join(r,file) for r,d,f in os.walk(animation_folder_path) for file in f]
    return animation_file_paths
    
def line_erase(line):
    txt_erase = term.move_y(line) + ' '
    print(term.move_xy(0, line) + blank_space,end='',flush=True)
def randomdelay():
    delaytime = random.uniform(0.001,0.1)
    return delaytime

def draw_speech_bubble():
    # speech arrows
    if single_line_end == '': #if textwrap not single line
        print(term.move_xy(space_for_text + 3,animation_mouth_line) + "--",end='',flush=True)
            #right side vertical
        for y in range(1,text_end_line + 2):
            print(term.move_xy(space_for_text + 2,y) + bubble_char,end='',flush=True)
            #bottom and top horizontal
        for x in range(space_for_text + 1, 1, -1):
            print(term.move_xy(x,0) + bubble_char,end='',flush=True)
            print(term.move_xy(x,text_end_line + 2) + bubble_char,end='',flush=True)
            sleep(0.01)
            #left side vertical
        for y in range(1, text_end_line + 2):
            print(term.move_xy(0,y) + bubble_char,end='',flush=True)
    else: # textwrap / input is single line!
        print(term.move_xy(space_for_text + 1,animation_mouth_line) + "-----",end='',flush=True)
            #right side vertical
        for y in range(1,text_end_line + 2):
            print(term.move_xy(single_line_end + 4,y) + bubble_char,end='',flush=True)
            #bottom and top horizontal
        for x in range(single_line_end + 1, 1, -1):
            print(term.move_xy(x,0) + bubble_char,end='',flush=True)
            print(term.move_xy(x,text_end_line + 2) + bubble_char,end='',flush=True)
            sleep(0.01)
            #left side vertical
        for y in range(1, text_end_line + 2):
            print(term.move_xy(0,y) + bubble_char,end='',flush=True)
 
def clear_text_in_bubble():
    for y in range(0, text_max_height):
        for x in range(0, space_for_text):
            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)

def render_text(text_wrapped):
    if single_line_end == '':
        for y in range(0, text_max_height):
            for x in range(0, space_for_text):
                #first print a bunch of random chars as if scrolling
                for scroll_char in alphabet:
                    print(term.move_xy(x + h_padding_int ,y + v_padding_int) + scroll_char)
                    if scroll_char == text_wrapped[y][x].lower(): #scroll till correct character
                        break
                    sleep(0.002)
                print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)
                print(term.move_xy(x + h_padding_int ,y + v_padding_int) + text_wrapped[y][x],end='',flush=True)
               # sleep(randomdelay())
                if text_wrapped[y] == blank_text_line:
                    break
    else:
        for x in range(0, single_line_end):
                #first print a bunch of random chars as if scrolling
                for temp_char in alphabet:
                    print(term.move_xy(x + h_padding_int ,v_padding_int) + temp_char)
                    if temp_char == text_wrapped[0][x].lower(): #scroll till correct character
                        break
                    sleep(0.002)
                print(term.move_xy(x + h_padding_int ,v_padding_int) + text_wrapped[0][x],end='',flush=True)
        



        #print(term.home)
def render_animation(animation):
    while True:
        for frame_number in range(0,len(animation)):
            for y in range(0,art_max_height):
                for x in range(0, space_for_art):
                    targetx = x + space_for_text + 5
                    print(term.move_xy(targetx,y) + animation[frame_number][y][x])
            sleep(frame_rate)

def start_animation_thread(animation):
    global animate
    animate = threading.Thread(target=render_animation, args=(animation,))
    animate.daemon = True
    animate.start()


def main():
    #instead fullscreen?
    #os.system("clear")
    print(term.enter_fullscreen())
    #print(term.clear())

    animation_file_paths = get_file_paths()
    animation = load_frames(animation_file_paths)
    #init list
    text_wrapped = []
    if args.input:
        text_wrapped = wrap_text(term.strip_seqs(args.input))
        text_padded = pad_text(text_wrapped)
    else:
        text_padded = ['']

    text_rendered = False
    with term.cbreak(), term.hidden_cursor():  
        start_animation_thread(animation)
        if not text_rendered:
            draw_speech_bubble()
            render_text(text_padded)
            text_rendered = True
   # sleep(2)
        #clear_text_in_bubble()
        while True:
            sleep(1)

            print(term.move_xy(0,text_max_height + 1) + "press 'n' for next or, 'q' to quit.",end='',flush=True)
            with term.cbreak():
                val = ''
                while val.lower() != 'q':
                    val = term.inkey(timeout=5)
                    if not val:
                       # print(term.move_xy(0,text_max_height + 1) + "waiting for input..")
                       continue
                    elif val.is_sequence:
                        print("got sequence: {0}.".format((str(val), val.name, val.code)))
                    elif val:
                       # print("got {0}.".format(val))
                        print(f'bye!{term.normal}')
                        print(term.exit_fullscreen())
                        exit()


if __name__ == "__main__":
    try:
        check_term()
        main()
    except Exception as e:
        print("Oops!", e.__class__, "occurred.")
    finally:
        #animate.raise_exception()
       # animate.join()
        exit()
            
