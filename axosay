#!/usr/bin/env python
from time import sleep
import random
import threading
import subprocess
import signal
import sys
import os
import argparse
import textwrap
from blessed import Terminal
term = Terminal()

# # # USER SETTINGS # # #
bubble_char = '.'
animation_mouth_line = 4
frame_rate = 0.17
h_padding_int = 2
v_padding_int = 1
art_max_width = 19 #edge to edge of ascii size
art_max_height = 12
text_max_height = term.height - 2
# # # END USER SETTINGS # # #


space_for_text = (term.width - art_max_width) - h_padding_int*2
space_for_art = (term.width - space_for_text) - h_padding_int*2
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--speed",type=float, default='0.005', help="Speed at which text is printed to screen by axolotl. (Default: 0.005)")
parser.add_argument("-f", "--framerate",type=float, default='0.17', help="Show a frame every ... seconds (Default: 0.17)")
parser.add_argument("-t", "--timeout", help="Automatically progress pages after a number of seconds till end (default: 2)")
parser.add_argument("-a", "--ascii",type=str, default='axolotl', help="Ascii character folder to select (default: axolotl)")
parser.add_argument("-c", "--command",type=str, default='', help="On-going command to display output: (eg: fortune)")
parser.add_argument("--clear",type=float, default='0.0005', help="Speed at which text is cleared from the screen (default: 0.0005)")
parser.add_argument("-r", "--repeat", type=float,default='5', help="On-going command repeat in seconds: (default: 5)")
parser.add_argument("-l", "--loop", type=bool,default=False, help="restart instead of ending(default: False)")
parser.add_argument('input', metavar='"string"', type=str, nargs='+', help='a space seperated, quoted string for each page')
args = parser.parse_args()
speed = float(args.speed)
animation_folder_path = "resources/animated/{}/".format(args.ascii)
alphabet = " #@*!?abcdefghijklmnopqrstiuvwxyz "
homedir = os.path.expanduser("~")

#print("args.strings=",)
# Remove newlines between text
#print(args.strings[0].replace("\n", " "))
#print(args.strings)
#sleep(1)

blank_text_line = ''
for space in range(0,space_for_text):
    blank_text_line = blank_text_line + ' '
blank_space = ''
for space in range(0,term.width):
    blank_space = blank_space + ' '
h_padding = ''
for space in range(0,h_padding_int):
    h_padding = h_padding + ' '
v_padding = ''
for space in range(v_padding_int):
    v_padding = v_padding + ' '

def on_resize():
    space_for_text = (term.width - art_max_width) - h_padding_int*2
    space_for_art = (term.width - space_for_text) - h_padding_int*2
    print(term.clear)
    #kill threads here
    #start_animation_thread(page,text_wrapped)
    #start_animate_text_thread(page,text_wrapped)

def check_term():
    if term.height < art_max_height + 2:
        print("Axosay: Term size needs to be at least " + str(art_max_width +5) + " by " + str(art_max_height + 2))
        print("Current size is " + str(term.width) + " by " + str(term.height))
        sys.exit()


def load_art(ascii_path):
    with open(ascii_path) as file:
        data = file.readlines()
    return data

def load_frames(animation_file_paths):
    animation = []
    for path in animation_file_paths:
        file = load_art(path)
        animation.append(file)
    return animation

# Handle all text input and return a list (pages) of wrapped lists (each line) eg wrapped_text[page][line]
def wrap_text(user_input): #recieve args.strings list 
    cleaned_strings=[]
    wrapped_lines=[]
    page_num = 0
    for dirty_string in user_input: 
        cleaned_strings.append(dirty_string.replace("\n", " ").replace("\t", "").replace("  ", " ")) 
    for string_num in range(0,len(cleaned_strings)): #pad all text on first load
        wrapped_lines.append(textwrap.wrap(cleaned_strings[string_num],width=space_for_text -1, initial_indent='',subsequent_indent='', replace_whitespace=True, expand_tabs=True, tabsize=1))
    line_num = 0
    page_num = 0
    while page_num in range(0,len(wrapped_lines)): #check each page
        page_continued=[]
        line_num = 0
        while len(wrapped_lines[page_num]) >= text_max_height: # if too many lines, insert a new page
                page_continued.insert(0,wrapped_lines[page_num].pop())
        if page_continued:
                temp_page_num = page_num + 1
                wrapped_lines.insert(temp_page_num, page_continued)
        else: # if page_continued empty continue to next page 
            page_num = page_num +1
    return wrapped_lines 

def get_file_paths():
    animation_file_paths = [os.path.join(r,file) for r,d,f in os.walk(animation_folder_path) for file in f]
    return animation_file_paths
    
def line_erase(line):
    #txt_erase = term.move_y(line) + ' '
    print(term.move_xy(0, line) + blank_space,end='',flush=True)

def randomdelay():
    #delaytime = random.uniform(0.00001,speed)
    delaytime = random.uniform(speed/2,speed)
    return delaytime

def draw_speech_bubble(page,text_wrapped):
    # speech arrows
    if len(text_wrapped[page]) > '1': #if textwrap not single line
        print(term.move_xy(space_for_text + 3,animation_mouth_line) + "--",end='',flush=True)
            #right side vertical
        for y in range(1,text_end_line + 2):
            print(term.move_xy(space_for_text + 2,y) + bubble_char,end='',flush=True)
            #bottom and top horizontal
        for x in range(space_for_text + 1, 1, -1):
            print(term.move_xy(x,0) + bubble_char,end='',flush=True)
            print(term.move_xy(x,text_end_line + 2) + bubble_char,end='',flush=True)
            sleep(0.01)
            #left side vertical
        for y in range(1, text_end_line + 2):
            print(term.move_xy(0,y) + bubble_char,end='',flush=True)
    else: # textwrap / input is single line!
        print(term.move_xy(space_for_text + 1,animation_mouth_line) + "-----",end='',flush=True)
            #right side vertical
        for y in range(1,text_end_line + 2):
            print(term.move_xy(single_line_end + 4,y) + bubble_char,end='',flush=True)
            #bottom and top horizontal
        for x in range(single_line_end + 1, 0, -1):
            print(term.move_xy(x,0) + bubble_char,end='',flush=True)
            print(term.move_xy(x,text_end_line + 2) + bubble_char,end='',flush=True)
            sleep(0.01)
            #left side vertical
        for y in range(1, text_end_line + 2):
            print(term.move_xy(0,y) + bubble_char,end='',flush=True)
 
def clear_bubble_and_text(page,text_wrapped):
    print(term.move_xy(space_for_text + 3,animation_mouth_line) + "  ",end='',flush=True)
    for y in range(0,space_for_text + 3): #range(0,len(text_wrapped[page]) + 3):
        for x in range(0,space_for_text + 2):
            print(term.move_xy(x,y) + " ",end='',flush=True)
            sleep(args.clear)
 

def clear_text_in_bubble():
    for y in range(text_max_height,0,-1):
        for x in range(space_for_text,0,-1):
            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)

def render_text(page, text_wrapped):
    for y in range(0, len(text_wrapped[page])): #text_max_height):
        for x in range(0, len(text_wrapped[page][y])): #space_for_text):
            #first print a bunch of random chars as if scrolling
            for scroll_char in alphabet:
                print(term.move_xy(x + h_padding_int ,y + v_padding_int) + scroll_char)
                if scroll_char == text_wrapped[page][y][x].lower(): #scroll till correct character
                    break
                sleep(randomdelay())
            sleep(randomdelay())
            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + ' ',end='',flush=True)
            print(term.move_xy(x + h_padding_int ,y + v_padding_int) + text_wrapped[page][y][x],end='',flush=True)

def render_animation(animation):
    while True:
        for frame_number in range(0,len(animation)):
            for y in range(0,art_max_height):
                for x in range(0, space_for_art):
                    targetx = x + space_for_text + 5
                    print(term.move_xy(targetx,y) + animation[frame_number][y][x])
            sleep(args.framerate)

def start_animation_thread(animation):
    animate = threading.Thread(target=render_animation, args=(animation,))
    animate.daemon = True
    animate.start()

def start_animate_text_thread(page,text_wrapped):
    animate_text = threading.Thread(target=render_text, args=(page,text_wrapped, ))
    animate_text.daemon = True
    animate_text.start()
    return animate_text

def prev_page(page,text_wrapped): 
    clear_bubble_and_text(page+1,text_wrapped) #clear the last page
    #draw_speech_bubble()
    start_animate_text_thread(page,text_wrapped) #render the current page

def next_page(page,text_wrapped): 
    #needs to handle 0
    if page != 0:
        clear_bubble_and_text(page-1,text_wrapped) #clear the previous page
    else:
        clear_bubble_and_text(page,text_wrapped) #clear the previous page
    #draw_speech_bubble()
    animate_text = start_animate_text_thread(page,text_wrapped) #render the current page
    return animate_text

def run_command(input):
    #print(term.clear + command)
    #sleep(1)
    #command is array already?
    #command is string, split via spaces and reassemble as array
    if isinstance(command, list):
        print("your object is a list !")
    else:
        command = input.split(" ")
        print("run_command() command after split is = " + command)
        print("your object was made into a list !")
        sleep(1)
    command_raw=[]
    command_raw.append((subprocess.run(command, capture_output=True)).stdout.decode())
    if isinstance(command_raw, list):
        print("your command_raw object is a list !")
        print(command_raw)
        sleep(1)
    else:
        temp = command_raw
        command_raw = []
        command_raw.append(temp)
        print("your command_raw object was made into a list !")
    print(term.clear)
    print(command_raw)
    sleep(1)
    return command_raw

def main():
    signal.signal(signal.SIGWINCH, on_resize)
    animation_file_paths = get_file_paths()
    animation = load_frames(animation_file_paths)
    selected_page = 0
    if args.command:
        user_input = run_command(args.command)
    else:
        user_input = args.input
    text_wrapped = wrap_text(user_input)                            # fetch user inputed strings (all formatted for screensize)
    with term.cbreak(), term.hidden_cursor(), term.fullscreen():    # hide cursor and go fullscreen! 
        start_animation_thread(animation)                           # start the character animation thread
        if not args.command:                                        # show first page
            next_page(selected_page,text_wrapped)
        
        while True: # enter main loop #dont lag it up ^^
            if args.timeout and not args.command:
                run_forever = True #by default disable inside the loop 
                while run_forever is True:
                    for num_page in range(0,len(text_wrapped)): # 0 is already shown at start
                        animate_text = next_page(num_page, text_wrapped)
                        animate_text.join()
                        sleep(float(args.timeout))
                        # WAIT for PREV THREAD FINISHES
                    sleep(float(args.timeout))
                    run_forever = args.loop # DISABLE / enable loop after a single iteration
                sleep(1)
                print(term.exit_fullscreen())
                sys.exit()
            if args.command:
                print("enter command mode" + args.command)
                sleep(1)
                run_forever = True
                while run_forever is True:
                    command = args.command
                    user_input = run_command(command)
                    print(term.clear)
                    print("user_input = " + user_input)
                    text_wrapped = wrap_text(user_input)
                    print('command text_wrapped returned' + text_wrapped)
                    sleep(1)
                    for page_num in range(0,len(text_wrapped)-1):
                        #start_animate_text_thread(page_num, text_wrapped)
                        animate_text = next_page(page_num, text_wrapped)
                       # animate_text.join()
                        sleep(1)
                        sleep(float(args.timeout))
                    sleep(args.repeat)
                    run_forever = args.loop # DISABLE / enable loop after a single iteration
                sys.exit()
            with term.cbreak():
                val = ''
                while val.lower() != 'q':
                    if len(text_wrapped) == 1: # if on last page of text
                        line_erase(text_max_height + 1)
                        print(term.move_xy(0,text_max_height + 1) + "[r]estart [q]uit",end='',flush=True)

                    elif selected_page == len(text_wrapped)-1: # if on last page of text
                        line_erase(text_max_height + 1)
                        print(term.move_xy(0,text_max_height + 1) + "[p]rev [r]estart [q]uit",end='',flush=True)
                    elif selected_page == 0: # if on first page of text
                        line_erase(text_max_height + 1)
                        print(term.move_xy(0,text_max_height + 1) + "[n]ext [r]estart [q]uit",end='',flush=True)
                    else:
                        line_erase(text_max_height + 1)
                        print(term.move_xy(0,text_max_height + 1) + "[n]ext [p]rev [r]estart [q]uit",end='',flush=True)
                    val = term.inkey(timeout=5)
                    if val == 'r':
                        line_erase(text_max_height + 1)
                        print(term.move_xy(0,text_max_height + 1) + "restart...",end='',flush=True)
                        sleep(0.5)
                        selected_page = 0
                        next_page(selected_page,text_wrapped)
                    elif val == 'n':
                        line_erase(text_max_height + 1)
                        #print(term.move_xy(0,text_max_height + 1) + "loading...",end='',flush=True)
                        #sleep(0.5)
                        if selected_page == len(text_wrapped)-1:
                            line_erase(text_max_height + 1)
                            print(term.move_xy(0,text_max_height + 1) + "last page..",end='',flush=True)
                            sleep(0.5)
                        else:
                            selected_page = selected_page + 1
                            next_page(selected_page, text_wrapped)
                    elif val == 'p':
                        if selected_page == 0:
                            line_erase(text_max_height + 1)
                            print(term.move_xy(0,text_max_height + 1) + "first page..",end='',flush=True)
                            sleep(0.5)
                        else:
                            selected_page = selected_page - 1
                            prev_page(selected_page, text_wrapped)
                    elif val == 'q':
                        print(f'bye!{term.normal}')
                        print(term.exit_fullscreen())
                        sys.exit()

if __name__ == "__main__":
    try:
        check_term()
        main()
    #except Exception as e:
     #   print("Oops!", e.__class__, "occurred.")
    except (KeyboardInterrupt, SystemExit):
        cleanup_stop_thread()
        print(term.exit_fullscreen())
        sys.exit()
    finally:
        #animate.raise_exception()
        print(term.exit_fullscreen())
        sys.exit()
            
